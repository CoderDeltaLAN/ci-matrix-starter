name: py-ci (reusable)
on:
  workflow_call:
    inputs:
      python-versions:
        required: false
        type: string
        default: '["3.11","3.12"]'
jobs:
  py:
    name: Python ${{ matrix.py }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py: ${{ fromJson(inputs.python-versions) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: "1.8.3"
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Cache Poetry venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ matrix.py }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ matrix.py }}-
      - name: Install deps
        run: poetry install --no-interaction
      - name: Ruff
        run: poetry run ruff check .
      - name: Black
        run: poetry run black --check src tests
      - name: Pytest
        env:
          PYTHONPATH: src
        run: poetry run pytest -q
