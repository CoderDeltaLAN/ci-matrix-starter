name: "TypeScript/Node CI (reusable)"

on:
  workflow_call:
    inputs:
      node_versions:
        type: string
        required: false
        default: '["22.x"]'
      os:
        type: string
        required: false
        default: '["ubuntu-latest"]'
      package_manager:
        type: string
        required: false
        default: pnpm
      test_command:
        type: string
        required: false
        default: 'pnpm -s test || echo "no tests"'

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: node${{ matrix.node }} • ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        node: ${{ fromJson(inputs.node_versions) }}
        os: ${{ fromJson(inputs.os) }}

    steps:
      - uses: actions/checkout@v5

      - name: Guard — skip if no Node project
        id: guard
        shell: bash
        run: |
          if find -L . -type f -name package.json \
               -not -path "./.git/*" -not -path "*/node_modules/*" \
               -print -quit | grep -q .; then
            echo "has_pkg=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_pkg=false" >> "$GITHUB_OUTPUT"
          fi

      - uses: actions/setup-node@v4
        if: ${{ steps.guard.outputs.has_pkg == 'true' }}
        with:
          node-version: ${{ matrix.node }}
          cache: ${{ inputs.package_manager }}

      - name: Install
        if: ${{ steps.guard.outputs.has_pkg == 'true' }}
        shell: bash
        run: |
          corepack enable || true
          case "${{ inputs.package_manager }}" in
            pnpm) pnpm i --frozen-lockfile || pnpm i ;;
            npm)  npm ci || npm i ;;
            yarn) yarn install --frozen-lockfile || yarn install ;;
            *)    echo "unknown package manager: ${{ inputs.package_manager }}" ;;
          esac

      - name: Test
        if: ${{ steps.guard.outputs.has_pkg == 'true' && inputs.test_command != '' }}
        run: ${{ inputs.test_command }}
