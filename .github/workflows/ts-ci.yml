name: "TypeScript/Node CI (reusable)"

on:
  workflow_call:
    inputs:
      node_versions:
        type: string
        required: false
        default: '["22.x"]'
      os:
        type: string
        required: false
        default: '["ubuntu-latest"]'
      package_manager:
        type: string
        required: false
        default: "pnpm"
      test_command:
        type: string
        required: false
        default: "npm test --if-present"

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    if: ${{ hashFiles('**/package.json') != '' }}
    name: node ${{ matrix.node }} • ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        node: ${{ fromJson(inputs.node_versions) }}
        os: ${{ fromJson(inputs.os) }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: ${{ inputs.package_manager }}

      - name: Enable Corepack (pnpm/yarn)
        shell: bash
        run: |
          corepack enable || true
          corepack prepare pnpm@latest --activate || true

      - name: Install dependencies (lockfile-aware)
        shell: bash
        run: |
          if [[ ! -f package.json ]]; then
            echo "No package.json → skip install"; exit 0
          fi
          if [[ -f pnpm-lock.yaml ]]; then
            pnpm i --frozen-lockfile
          elif [[ -f package-lock.json ]]; then
            npm ci
          elif [[ -f yarn.lock ]]; then
            yarn install --frozen-lockfile
          else
            npm ci || npm i
          fi

      - name: Prettier (check if config/files present)
        if: ${{ hashFiles('**/.prettierrc*','**/prettier.config.*','**/*.js','**/*.ts','**/*.tsx') != '' }}
        shell: bash
        run: npx -y prettier -c .

      - name: ESLint (only if config exists)
        if: ${{ hashFiles('**/.eslintrc*') != '' }}
        shell: bash
        run: npx -y eslint . --max-warnings=0

      - name: Type check (only if tsconfig exists)
        if: ${{ hashFiles('**/tsconfig.json') != '' }}
        shell: bash
        run: npx -y tsc --noEmit

      - name: Tests
        shell: bash
        run: |
          if [[ -f package.json ]]; then
            ${{ inputs.test_command }}
          else
            echo "No package.json → skip tests"
          fi

      - name: Build (only if script exists)
        shell: bash
        run: |
          if [[ -f package.json ]] && node -e "process.exit(+(!!!(require('./package.json').scripts||{}).build))"; then
            npm run build
          else
            echo "No build script; skipping."
          fi
