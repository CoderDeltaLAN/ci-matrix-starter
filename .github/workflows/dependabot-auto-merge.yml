name: Auto-merge Dependabot when green

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]
  check_suite:
    types: [completed]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  enable-automerge:
    name: enable-automerge
    # Solo si el PR es de dependabot o si el actor es dependabot
    if: >
      (github.event.pull_request.user.login == 'dependabot[bot]') ||
      (github.actor == 'dependabot[bot]')
    runs-on: ubuntu-latest
    steps:
      - name: Find PR for this context (fallback when dispatched)
        id: find_pr
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            // Si viene de PR, úsalo
            if (context.payload.pull_request) {
              return { number: context.payload.pull_request.number };
            }
            // Si viene de check_suite/completed o dispatch, intenta localizar PR abierto
            const head = (context.ref || '').replace('refs/heads/','');
            const { data: prs } = await github.rest.pulls.list({ owner, repo, state: 'open', head: `${owner}:${head}` });
            const pr = prs.find(p => p.user.login === 'dependabot[bot]');
            return pr ? { number: pr.number } : {};
      - name: Enable auto-merge (squash) if checks are green
        if: steps.find_pr.outputs.result != ''
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const prNumber = JSON.parse(core.getInput('result'))?.number || core.getInput('result')?.number || null;
            if (!prNumber) {
              core.info('No PR found for this ref; exiting.');
              return;
            }
            // Obtén el PR para su node_id (GraphQL requiere ID)
            const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number: prNumber });
            // Habilita auto-merge por GraphQL (método squash)
            const mutation = `
              mutation($pr:ID!){
                enablePullRequestAutoMerge(input:{pullRequestId:$pr, mergeMethod:SQUASH}) { clientMutationId }
              }`;
            await github.graphql(mutation, { pr: pr.node_id });
            core.info(`Auto-merge enabled on PR #${prNumber}`);
